<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HeQing&#39;s Blog</title>
    <link>https://heqing90.github.io/myblog/post/</link>
    <description>Recent content in Posts on HeQing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 13 Jan 2020 16:15:23 +0800</lastBuildDate>
    
	<atom:link href="https://heqing90.github.io/myblog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Etcd client V3 分布式锁实现方式</title>
      <link>https://heqing90.github.io/myblog/post/etcd-go-distributed-lock/</link>
      <pubDate>Mon, 13 Jan 2020 16:15:23 +0800</pubDate>
      
      <guid>https://heqing90.github.io/myblog/post/etcd-go-distributed-lock/</guid>
      <description>原理 客户端以统一前缀（比如/mylock）创建全局唯一Key（client 1 -&amp;gt; /mylock/client-1-uuid, client 2 -&amp;gt; /mylock/client-2-uuid ）。 为该Key绑定租约(lease)，并设定TTL，</description>
    </item>
    
    <item>
      <title>Golang 两种同步变量的实现方式</title>
      <link>https://heqing90.github.io/myblog/post/golang-sync-pattern/</link>
      <pubDate>Thu, 09 Jan 2020 15:18:00 +0800</pubDate>
      
      <guid>https://heqing90.github.io/myblog/post/golang-sync-pattern/</guid>
      <description>使用 sync.RWMutex 同步数据读写 type syncData struct { sync.RWMutex val int } func (data *syncData) getValue() int { data.RLock() defer data.RUnlock() return data.val } func (data *syncData) setValue(v int) { data.Lock() defer data.Unlock() data.val = v } 使用 channel 同步数据读写 type chData struct { getCh chan int setCh chan int val int } func newChData() *chData { d :=</description>
    </item>
    
    <item>
      <title>gRPC &#43; Golang &#43; python 初窥门径</title>
      <link>https://heqing90.github.io/myblog/post/grpc-go-python/</link>
      <pubDate>Wed, 08 Jan 2020 15:32:38 +0800</pubDate>
      
      <guid>https://heqing90.github.io/myblog/post/grpc-go-python/</guid>
      <description>环境准备 配置 gRPC for Golang 安装 grpc go get -u google.golang.org/grpc 安装 protoc-gen-go go get -u github.com/golang/protobuf/protoc-gen-go 配置 gRPC for python 安装 grpcio python -m pip install grpcio 安装 grpcio-tools python -m pip install grpcio-tools 编辑 protocol buffer 协议 syntax = &amp;#34;proto3&amp;#34;; package myhello; // my test service service MyTest { // my test foo rpc MyFoo (MyRequest) returns</description>
    </item>
    
    <item>
      <title>Windows使用Github Pages &#43; Hugo 搭建个人博客</title>
      <link>https://heqing90.github.io/myblog/post/github-hugo-win/</link>
      <pubDate>Sun, 05 Jan 2020 22:43:26 +0800</pubDate>
      
      <guid>https://heqing90.github.io/myblog/post/github-hugo-win/</guid>
      <description>环境准备 安装Hugo 下载Hugo Release 对应的Windows 版本 hugo.exe 解压Zip, 将hugo.exe路径添加到环境变量Path中 检查 hugo 是否能正常运行 hugo</description>
    </item>
    
  </channel>
</rss>